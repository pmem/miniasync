---
layout: manual
Content-Style: 'text/css'
title: _MP(MINIASYNC_VDM, 3)
collection: miniasync
header: MINIASYNC_VDM
secondary_title: miniasync
...

[comment]: <> (SPDX-License-Identifier: BSD-3-Clause)
[comment]: <> (Copyright 2022, Intel Corporation)

[comment]: <> (miniasync_vdm.3 -- man page for miniasync vdm API)

[NAME](#name)<br />
[SYNOPSIS](#synopsis)<br />
[DESCRIPTION](#description)<br />
[SEE ALSO](#see-also)<br />


# NAME #

**miniasync_vdm** - Virtual data mover API for miniasync library


# SYNOPSIS #

```c
#include <libminiasync.h>

struct vdm *vdm_new(struct vdm_descriptor *descriptor);
void vdm_delete(struct vdm *vdm);
struct vdm_memcpy_future vdm_memcpy(struct vdm *vdm, void *dest, void *src, size_t n, uint64_t flags);
```

For general description of miniasync see **miniasync**(7).


# DESCRIPTION #

API for miniasync library forming the basis of various data movers.

`struct vdm *vdm_new(struct vdm_descriptor *descriptor);`

Creates new instance of virtual data mover defined by the `descriptor`. It
also performs necessary initialization specified in the descriptor. For example,
creating instance of vdm with `vdm_descriptor_threads` calls a function that creates
necessary threads and data associated with them.

`void vdm_delete(struct vdm *vdm);`

Cleans up all memory allocated by `vdm_new` and performs additional finalization
if specified in the descriptor of the vdm instance.

`struct vdm_memcpy_future vdm_memcpy(struct vdm *vdm, void *dest, void *src, size_t n, uint64_t flags);`

Initializes and returns a new memcpy future based on the virtual data mover instance `vdm` and
the remaining parameters.

# RETURN VALUE #

The `vdm_new` returns pointer to a `struct vdm` or **NULL** if the allocation of
`struct vdm` failed, passed descriptor is **NULL** or calling
`descriptor->init` failed.

The 'vdm_memcpy' always returns a copy of `struct vdm_memcpy_future`.

# SEE ALSO #

**miniasync**(7), **miniasync_future**(3), **miniasync_runtime**(3), **miniasync_vdm_synchronous**(3), **miniasync_vdm_threads**(3) and **<https://pmem.io>**
