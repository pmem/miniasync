---
layout: manual
Content-Style: 'text/css'
title: _MP(MINIASYNC_VDM, 3)
collection: miniasync
header: MINIASYNC_VDM
secondary_title: miniasync
...

[comment]: <> (SPDX-License-Identifier: BSD-3-Clause)
[comment]: <> (Copyright 2021, Intel Corporation)

[comment]: <> (miniasync_vdm.3 -- man page for miniasync vdm API)

[NAME](#name)<br />
[SYNOPSIS](#synopsis)<br />
[DESCRIPTION](#description)<br />
[ERRORS](#errors)<br />
[SEE ALSO](#see-also)<br />


# NAME #

**miniasync_vdm** - Virtual data mover API for miniasync library


# SYNOPSIS #

```c
#include <libminiasync.h>

struct vdm_descriptor *vdm_descriptor_synchronous(void);
struct vdm_descriptor *vdm_descriptor_pthreads(void);

struct vdm *vdm_new(struct vdm_descriptor *descriptor);
void vdm_delete(struct vdm *vdm);
```

For general description of miniasync see **miniasync**(7).


# DESCRIPTION #

XXX: add description here.

`struct vdm_descriptor *vdm_descriptor_synchronous(void);`

:	XXX add description here.

`struct vdm_descriptor *vdm_descriptor_pthreads(void);`

:   In order to use parallel memcpy on UNIX pthreads, create appropriate
descriptor:
```c
struct vdm_descriptor *vdm_async_descriptor = vdm_descriptor_pthreads();
```
Then, create a new virtual data mover instance using that descriptor:
```c
struct vdm *vdm = vdm_new(vdm_async_descriptor);
```
From now on, every future created with `vdm_memcpy` and previously
created instanece of data mover `struct vdm_memcpy_future fut = vdm_memcpy(vdm, dst, src, size, flags);`
will be performed asynchronously.
When a new memcpy is processed by runtime, the runtime in every `future_poll`
tries until it succeeds to add it's context into a queue, which is dequeued, regarding the policy set in
`struct vdm_pthread_queue`, into a ringbuffer. The ringbuffer is containing
multiple memcpy_pthreads data and is dequeued by worker threads in FIFO order.
If you would like to change the count of worker threads, ringbuffer or queue size, go to
`vdm.h` and change the values of the appropriate preprocessor directives which
are `THREADS_COUNT`, `RINGBUF_SIZE`, `QUEUE_SIZE`.

`struct vdm *vdm_new(struct vdm_descriptor *descriptor);`

:	XXX add description here.

`void vdm_delete(struct vdm *vdm);`

:	XXX add description here.


## ERRORS ##

XXX add description here.


# SEE ALSO #

**miniasync**(7), **miniasync_future**(3), **miniasync_runtime**(3) and **<https://pmem.io>**
